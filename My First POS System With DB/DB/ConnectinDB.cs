using MySql.Data.MySqlClient;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Deployment.Application;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Windows.Forms;

namespace My_First_POS_System_With_DB
{
    internal class ConnectionDB
    {
        private static string con = "Server=localhost;Port=3306;Database=pointofsale_db;User Id=root;Password='';";

        public static MySqlConnection GetConnection()
        {
            MySqlConnection connection = new MySqlConnection(con);
            try
            {
                connection.Open();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show("MySql Connection Error!\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return connection;
        }

        public bool Authentication(string UserName, string Password)
        {
            using (MySqlConnection connection = GetConnection())
            {
                string query = "SELECT * FROM tb_Login WHERE Username = @UserName AND Password = @Password ";

                using (MySqlCommand cmd = new MySqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@UserName", UserName);
                    cmd.Parameters.AddWithValue("@Password", Password);

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.HasRows)
                        {
                            // User authenticated successfully
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        public static void RegisterUser(string firstName, string lastName, string gender, Image image, string middlename, string username, string password)
        {
            using (MySqlConnection connection = GetConnection())
            using (MySqlTransaction transaction = connection.BeginTransaction())
            {
                try
                {
                    // Insert into tb_login
                    string loginQuery = "INSERT INTO tb_login (Username, Password) VALUES (@Username, @Password)";

                    using (MySqlCommand cmd = new MySqlCommand(loginQuery, connection, transaction))
                    {
                        cmd.Parameters.AddWithValue("@Username", username);
                        cmd.Parameters.AddWithValue("@Password", password);

                        cmd.ExecuteNonQuery();

                        // retrieve the Login_ID generated by the database and same Id connection
                        int loginId = (int)cmd.LastInsertedId;

                        // Insert into tb_cashier with the corresponding Login_ID
                        string cashierQuery = "INSERT INTO tb_cashier (Login_ID, FirstName, LastName, Gender, PictureCashier, MiddleName) " +
                                              "VALUES (@Login_ID, @FirstName, @LastName, @Gender, @PictureCashier, @MiddleName)";

                        using (MySqlCommand cashierCmd = new MySqlCommand(cashierQuery, connection, transaction))
                        {
                            cashierCmd.Parameters.AddWithValue("@Login_ID", loginId);
                            cashierCmd.Parameters.AddWithValue("@FirstName", firstName);
                            cashierCmd.Parameters.AddWithValue("@LastName", lastName);
                            cashierCmd.Parameters.AddWithValue("@Gender", gender);
                            cashierCmd.Parameters.AddWithValue("@MiddleName", middlename);

                            if (image != null)
                            {
                                using (MemoryStream ms = new MemoryStream())
                                {
                                    image.Save(ms, ImageFormat.Jpeg);
                                    cashierCmd.Parameters.AddWithValue("@PictureCashier", ms.ToArray());
                                }
                            }
                            else
                            {
                                cashierCmd.Parameters.AddWithValue("@PictureCashier", DBNull.Value);
                            }

                            cashierCmd.ExecuteNonQuery();
                        }
                    }

                    transaction.Commit();
                    MessageBox.Show("Added Successfully", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (MySqlException ex)
                {
                    transaction.Rollback();
                    MessageBox.Show("Record not inserted\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }




        public static void AddProduct(string itemName, decimal itemPrices, int itemStocks, Image image, string category)
        {
            using (MySqlConnection connection = GetConnection())
            {
                try
                {
                    // First, retrieve the Category_ID based on the category name
                    int categoryId = GetCategoryIdByName(category, connection);

                    // Check if the category exists
                    if (categoryId == -1)
                    {
                        // Category does not exist, you may want to handle this situation accordingly
                        MessageBox.Show("Category does not exist. Please add the category first.");
                        return;
                    }

                    // Now, insert into tb_item with the obtained Category_ID
                    string query = "INSERT INTO tb_item (Category_ID, ItemName, ItemPrice, ItemStock, ItemPicture) VALUES (@Category, @Name, @Price, @Stock, @Image)";
                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Category", categoryId);
                        command.Parameters.AddWithValue("@Name", itemName);
                        command.Parameters.AddWithValue("@Price", itemPrices);
                        command.Parameters.AddWithValue("@Stock", itemStocks);

                        // Convert Image to byte array before storing in the database (this is just a simple example)
                        byte[] imageData = ImageToByteArray(image);
                        command.Parameters.AddWithValue("@Image", imageData);

                        command.ExecuteNonQuery();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred while adding the product: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                // The 'using' statement will automatically close the connection when it goes out of scope
            }
        }




        private static int GetCategoryIdByName(string category, MySqlConnection connection)
        {
            string query = "SELECT Category_ID FROM tb_category WHERE CategoryProduct = @Category";
            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Category", category);

                object result;

                try
                {
                    connection.Open();  // Open the connection here
                    result = command.ExecuteScalar();
                }
                finally
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();  // Ensure the connection is closed, even in case of an exception
                    }
                }

                return result != null ? Convert.ToInt32(result) : -1; // Return -1 if the category does not exist
            }
            // The 'using' statement will automatically close the connection when it goes out of scope
        }


        private static byte[] ImageToByteArray(Image image)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                // Ensure the image is not null
                if (image != null)
                {
                    image.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                    return ms.ToArray();
                }
                else
                {
                    return null; // or throw an exception, depending on your requirements
                }
            }
        }
    }

}

    

